/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_MQTT_CLIENT_H
#define _MOCK_MQTT_CLIENT_H

#include "unity.h"
#include "mqtt_client.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

#ifdef __cplusplus
extern "C" {
#endif

void mock_mqtt_client_Init(void);
void mock_mqtt_client_Destroy(void);
void mock_mqtt_client_Verify(void);




#define esp_mqtt_client_init_Ignore() TEST_FAIL_MESSAGE("esp_mqtt_client_init requires _IgnoreAndReturn");
#define esp_mqtt_client_init_IgnoreAndReturn(cmock_retval) esp_mqtt_client_init_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_mqtt_client_init_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_mqtt_client_handle_t cmock_to_return);
#define esp_mqtt_client_init_StopIgnore() esp_mqtt_client_init_CMockStopIgnore()
void esp_mqtt_client_init_CMockStopIgnore(void);
#define esp_mqtt_client_init_Expect(config) TEST_FAIL_MESSAGE("esp_mqtt_client_init requires _ExpectAndReturn");
#define esp_mqtt_client_init_ExpectAndReturn(config, cmock_retval) esp_mqtt_client_init_CMockExpectAndReturn(__LINE__, config, cmock_retval)
void esp_mqtt_client_init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const esp_mqtt_client_config_t* config, esp_mqtt_client_handle_t cmock_to_return);
typedef esp_mqtt_client_handle_t (* CMOCK_esp_mqtt_client_init_CALLBACK)(const esp_mqtt_client_config_t* config, int cmock_num_calls);
void esp_mqtt_client_init_AddCallback(CMOCK_esp_mqtt_client_init_CALLBACK Callback);
void esp_mqtt_client_init_Stub(CMOCK_esp_mqtt_client_init_CALLBACK Callback);
#define esp_mqtt_client_init_StubWithCallback esp_mqtt_client_init_Stub
#define esp_mqtt_client_start_Ignore() TEST_FAIL_MESSAGE("esp_mqtt_client_start requires _IgnoreAndReturn");
#define esp_mqtt_client_start_IgnoreAndReturn(cmock_retval) esp_mqtt_client_start_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_mqtt_client_start_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_mqtt_client_start_StopIgnore() esp_mqtt_client_start_CMockStopIgnore()
void esp_mqtt_client_start_CMockStopIgnore(void);
#define esp_mqtt_client_start_Expect(client) TEST_FAIL_MESSAGE("esp_mqtt_client_start requires _ExpectAndReturn");
#define esp_mqtt_client_start_ExpectAndReturn(client, cmock_retval) esp_mqtt_client_start_CMockExpectAndReturn(__LINE__, client, cmock_retval)
void esp_mqtt_client_start_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_mqtt_client_handle_t client, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_mqtt_client_start_CALLBACK)(esp_mqtt_client_handle_t client, int cmock_num_calls);
void esp_mqtt_client_start_AddCallback(CMOCK_esp_mqtt_client_start_CALLBACK Callback);
void esp_mqtt_client_start_Stub(CMOCK_esp_mqtt_client_start_CALLBACK Callback);
#define esp_mqtt_client_start_StubWithCallback esp_mqtt_client_start_Stub
#define esp_mqtt_client_stop_Ignore() TEST_FAIL_MESSAGE("esp_mqtt_client_stop requires _IgnoreAndReturn");
#define esp_mqtt_client_stop_IgnoreAndReturn(cmock_retval) esp_mqtt_client_stop_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_mqtt_client_stop_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_mqtt_client_stop_StopIgnore() esp_mqtt_client_stop_CMockStopIgnore()
void esp_mqtt_client_stop_CMockStopIgnore(void);
#define esp_mqtt_client_stop_Expect(client) TEST_FAIL_MESSAGE("esp_mqtt_client_stop requires _ExpectAndReturn");
#define esp_mqtt_client_stop_ExpectAndReturn(client, cmock_retval) esp_mqtt_client_stop_CMockExpectAndReturn(__LINE__, client, cmock_retval)
void esp_mqtt_client_stop_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_mqtt_client_handle_t client, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_mqtt_client_stop_CALLBACK)(esp_mqtt_client_handle_t client, int cmock_num_calls);
void esp_mqtt_client_stop_AddCallback(CMOCK_esp_mqtt_client_stop_CALLBACK Callback);
void esp_mqtt_client_stop_Stub(CMOCK_esp_mqtt_client_stop_CALLBACK Callback);
#define esp_mqtt_client_stop_StubWithCallback esp_mqtt_client_stop_Stub
#define esp_mqtt_client_destroy_Ignore() TEST_FAIL_MESSAGE("esp_mqtt_client_destroy requires _IgnoreAndReturn");
#define esp_mqtt_client_destroy_IgnoreAndReturn(cmock_retval) esp_mqtt_client_destroy_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_mqtt_client_destroy_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_mqtt_client_destroy_StopIgnore() esp_mqtt_client_destroy_CMockStopIgnore()
void esp_mqtt_client_destroy_CMockStopIgnore(void);
#define esp_mqtt_client_destroy_Expect(client) TEST_FAIL_MESSAGE("esp_mqtt_client_destroy requires _ExpectAndReturn");
#define esp_mqtt_client_destroy_ExpectAndReturn(client, cmock_retval) esp_mqtt_client_destroy_CMockExpectAndReturn(__LINE__, client, cmock_retval)
void esp_mqtt_client_destroy_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_mqtt_client_handle_t client, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_mqtt_client_destroy_CALLBACK)(esp_mqtt_client_handle_t client, int cmock_num_calls);
void esp_mqtt_client_destroy_AddCallback(CMOCK_esp_mqtt_client_destroy_CALLBACK Callback);
void esp_mqtt_client_destroy_Stub(CMOCK_esp_mqtt_client_destroy_CALLBACK Callback);
#define esp_mqtt_client_destroy_StubWithCallback esp_mqtt_client_destroy_Stub
#define esp_mqtt_client_subscribe_Ignore() TEST_FAIL_MESSAGE("esp_mqtt_client_subscribe requires _IgnoreAndReturn");
#define esp_mqtt_client_subscribe_IgnoreAndReturn(cmock_retval) esp_mqtt_client_subscribe_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_mqtt_client_subscribe_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_mqtt_client_subscribe_StopIgnore() esp_mqtt_client_subscribe_CMockStopIgnore()
void esp_mqtt_client_subscribe_CMockStopIgnore(void);
#define esp_mqtt_client_subscribe_Expect(client, topic, qos) TEST_FAIL_MESSAGE("esp_mqtt_client_subscribe requires _ExpectAndReturn");
#define esp_mqtt_client_subscribe_ExpectAndReturn(client, topic, qos, cmock_retval) esp_mqtt_client_subscribe_CMockExpectAndReturn(__LINE__, client, topic, qos, cmock_retval)
void esp_mqtt_client_subscribe_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_mqtt_client_handle_t client, const char* topic, int qos, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_mqtt_client_subscribe_CALLBACK)(esp_mqtt_client_handle_t client, const char* topic, int qos, int cmock_num_calls);
void esp_mqtt_client_subscribe_AddCallback(CMOCK_esp_mqtt_client_subscribe_CALLBACK Callback);
void esp_mqtt_client_subscribe_Stub(CMOCK_esp_mqtt_client_subscribe_CALLBACK Callback);
#define esp_mqtt_client_subscribe_StubWithCallback esp_mqtt_client_subscribe_Stub
#define esp_mqtt_client_unsubscribe_Ignore() TEST_FAIL_MESSAGE("esp_mqtt_client_unsubscribe requires _IgnoreAndReturn");
#define esp_mqtt_client_unsubscribe_IgnoreAndReturn(cmock_retval) esp_mqtt_client_unsubscribe_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_mqtt_client_unsubscribe_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_mqtt_client_unsubscribe_StopIgnore() esp_mqtt_client_unsubscribe_CMockStopIgnore()
void esp_mqtt_client_unsubscribe_CMockStopIgnore(void);
#define esp_mqtt_client_unsubscribe_Expect(client, topic) TEST_FAIL_MESSAGE("esp_mqtt_client_unsubscribe requires _ExpectAndReturn");
#define esp_mqtt_client_unsubscribe_ExpectAndReturn(client, topic, cmock_retval) esp_mqtt_client_unsubscribe_CMockExpectAndReturn(__LINE__, client, topic, cmock_retval)
void esp_mqtt_client_unsubscribe_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_mqtt_client_handle_t client, const char* topic, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_mqtt_client_unsubscribe_CALLBACK)(esp_mqtt_client_handle_t client, const char* topic, int cmock_num_calls);
void esp_mqtt_client_unsubscribe_AddCallback(CMOCK_esp_mqtt_client_unsubscribe_CALLBACK Callback);
void esp_mqtt_client_unsubscribe_Stub(CMOCK_esp_mqtt_client_unsubscribe_CALLBACK Callback);
#define esp_mqtt_client_unsubscribe_StubWithCallback esp_mqtt_client_unsubscribe_Stub
#define esp_mqtt_client_publish_Ignore() TEST_FAIL_MESSAGE("esp_mqtt_client_publish requires _IgnoreAndReturn");
#define esp_mqtt_client_publish_IgnoreAndReturn(cmock_retval) esp_mqtt_client_publish_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_mqtt_client_publish_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_mqtt_client_publish_StopIgnore() esp_mqtt_client_publish_CMockStopIgnore()
void esp_mqtt_client_publish_CMockStopIgnore(void);
#define esp_mqtt_client_publish_Expect(client, topic, data, len, qos, retain) TEST_FAIL_MESSAGE("esp_mqtt_client_publish requires _ExpectAndReturn");
#define esp_mqtt_client_publish_ExpectAndReturn(client, topic, data, len, qos, retain, cmock_retval) esp_mqtt_client_publish_CMockExpectAndReturn(__LINE__, client, topic, data, len, qos, retain, cmock_retval)
void esp_mqtt_client_publish_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_mqtt_client_handle_t client, const char* topic, const char* data, int len, int qos, int retain, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_mqtt_client_publish_CALLBACK)(esp_mqtt_client_handle_t client, const char* topic, const char* data, int len, int qos, int retain, int cmock_num_calls);
void esp_mqtt_client_publish_AddCallback(CMOCK_esp_mqtt_client_publish_CALLBACK Callback);
void esp_mqtt_client_publish_Stub(CMOCK_esp_mqtt_client_publish_CALLBACK Callback);
#define esp_mqtt_client_publish_StubWithCallback esp_mqtt_client_publish_Stub
#define esp_mqtt_client_register_event_Ignore() TEST_FAIL_MESSAGE("esp_mqtt_client_register_event requires _IgnoreAndReturn");
#define esp_mqtt_client_register_event_IgnoreAndReturn(cmock_retval) esp_mqtt_client_register_event_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_mqtt_client_register_event_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_mqtt_client_register_event_StopIgnore() esp_mqtt_client_register_event_CMockStopIgnore()
void esp_mqtt_client_register_event_CMockStopIgnore(void);
#define esp_mqtt_client_register_event_Expect(client, event_id, handler, handler_args) TEST_FAIL_MESSAGE("esp_mqtt_client_register_event requires _ExpectAndReturn");
#define esp_mqtt_client_register_event_ExpectAndReturn(client, event_id, handler, handler_args, cmock_retval) esp_mqtt_client_register_event_CMockExpectAndReturn(__LINE__, client, event_id, handler, handler_args, cmock_retval)
void esp_mqtt_client_register_event_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_mqtt_client_handle_t client, int32_t event_id, void* handler, void* handler_args, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_mqtt_client_register_event_CALLBACK)(esp_mqtt_client_handle_t client, int32_t event_id, void* handler, void* handler_args, int cmock_num_calls);
void esp_mqtt_client_register_event_AddCallback(CMOCK_esp_mqtt_client_register_event_CALLBACK Callback);
void esp_mqtt_client_register_event_Stub(CMOCK_esp_mqtt_client_register_event_CALLBACK Callback);
#define esp_mqtt_client_register_event_StubWithCallback esp_mqtt_client_register_event_Stub
#define esp_mqtt_client_register_event_ReturnThruPtr_handler(handler) esp_mqtt_client_register_event_CMockReturnMemThruPtr_handler(__LINE__, handler, sizeof(*handler))
#define esp_mqtt_client_register_event_ReturnArrayThruPtr_handler(handler, cmock_len) esp_mqtt_client_register_event_CMockReturnMemThruPtr_handler(__LINE__, handler, (cmock_len * sizeof(*handler)))
#define esp_mqtt_client_register_event_ReturnMemThruPtr_handler(handler, cmock_size) esp_mqtt_client_register_event_CMockReturnMemThruPtr_handler(__LINE__, handler, (cmock_size))
void esp_mqtt_client_register_event_CMockReturnMemThruPtr_handler(UNITY_LINE_TYPE cmock_line, void const* handler, size_t cmock_size);
#define esp_mqtt_client_register_event_ReturnThruPtr_handler_args(handler_args) esp_mqtt_client_register_event_CMockReturnMemThruPtr_handler_args(__LINE__, handler_args, sizeof(*handler_args))
#define esp_mqtt_client_register_event_ReturnArrayThruPtr_handler_args(handler_args, cmock_len) esp_mqtt_client_register_event_CMockReturnMemThruPtr_handler_args(__LINE__, handler_args, (cmock_len * sizeof(*handler_args)))
#define esp_mqtt_client_register_event_ReturnMemThruPtr_handler_args(handler_args, cmock_size) esp_mqtt_client_register_event_CMockReturnMemThruPtr_handler_args(__LINE__, handler_args, (cmock_size))
void esp_mqtt_client_register_event_CMockReturnMemThruPtr_handler_args(UNITY_LINE_TYPE cmock_line, void const* handler_args, size_t cmock_size);

#ifdef __cplusplus
}
#endif

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
